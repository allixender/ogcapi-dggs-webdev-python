# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from dggs_api_server.models.base_model_ import Model
from dggs_api_server.models.link import Link  # noqa: F401,E501
from dggs_api_server import util


class CatalogEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        id: str = None,
        dggs_id: str = None,
        title: str = None,
        description: str = None,
        resolutions: List[int] = None,
        links: List[Link] = None,
        extent: List[float] = None,
        variables: List[str] = None,
        date_loaded: str = None,
    ):  # noqa: E501
        """CatalogEntry - a model defined in Swagger

        :param id: The id of this CatalogEntry.  # noqa: E501
        :type id: str
        :param dggs_id: The dggs_id of this CatalogEntry.  # noqa: E501
        :type dggs_id: str
        :param title: The title of this CatalogEntry.  # noqa: E501
        :type title: str
        :param description: The description of this CatalogEntry.  # noqa: E501
        :type description: str
        :param resolutions: The resolutions of this CatalogEntry.  # noqa: E501
        :type resolutions: List[int]
        :param links: The links of this CatalogEntry.  # noqa: E501
        :type links: List[Link]
        """
        self.swagger_types = {
            "id": str,
            "dggs_id": str,
            "title": str,
            "description": str,
            "resolutions": List[int],
            "links": List[Link],
            "extent": List[float],
            "variables": List[str],
            "date_loaded": str,
        }

        self.attribute_map = {
            "id": "id",
            "dggs_id": "dggs-id",
            "title": "title",
            "description": "description",
            "resolutions": "resolutions",
            "links": "links",
            "extent": "extent",
            "variables": "variables",
            "date_loaded": "date_loaded",
        }
        self._id = id
        self._dggs_id = dggs_id
        self._title = title
        self._description = description
        self._resolutions = resolutions
        self._links = links
        self._extent = extent
        self._variables = variables
        self._date_loaded = date_loaded

    @classmethod
    def from_dict(cls, dikt) -> "CatalogEntry":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CatalogEntry of this CatalogEntry.  # noqa: E501
        :rtype: CatalogEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this CatalogEntry.

        identifier of the the CatalogEntry. In case it's a DGGS RS service, it will be the DGGS instance identifier, otherwise, it's going to be the data CatalogEntry id.  # noqa: E501

        :return: The id of this CatalogEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CatalogEntry.

        identifier of the the CatalogEntry. In case it's a DGGS RS service, it will be the DGGS instance identifier, otherwise, it's going to be the data CatalogEntry id.  # noqa: E501

        :param id: The id of this CatalogEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def dggs_id(self) -> str:
        """Gets the dggs_id of this CatalogEntry.

        identifiers of the DGGS instance. For DGGS RS services, it will be the same as the id, for DGGS Data services, it identifiers the particular DGGS instance used.  # noqa: E501

        :return: The dggs_id of this CatalogEntry.
        :rtype: str
        """
        return self._dggs_id

    @dggs_id.setter
    def dggs_id(self, dggs_id: str):
        """Sets the dggs_id of this CatalogEntry.

        identifiers of the DGGS instance. For DGGS RS services, it will be the same as the id, for DGGS Data services, it identifiers the particular DGGS instance used.  # noqa: E501

        :param dggs_id: The dggs_id of this CatalogEntry.
        :type dggs_id: str
        """

        self._dggs_id = dggs_id

    @property
    def title(self) -> str:
        """Gets the title of this CatalogEntry.

        human readable title of the CatalogEntry  # noqa: E501

        :return: The title of this CatalogEntry.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this CatalogEntry.

        human readable title of the CatalogEntry  # noqa: E501

        :param title: The title of this CatalogEntry.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this CatalogEntry.

        a description of the CatalogEntry  # noqa: E501

        :return: The description of this CatalogEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CatalogEntry.

        a description of the CatalogEntry  # noqa: E501

        :param description: The description of this CatalogEntry.
        :type description: str
        """

        self._description = description

    @property
    def resolutions(self) -> List[int]:
        """Gets the resolutions of this CatalogEntry.


        :return: The resolutions of this CatalogEntry.
        :rtype: List[int]
        """
        return self._resolutions

    @resolutions.setter
    def resolutions(self, resolutions: List[int]):
        """Sets the resolutions of this CatalogEntry.


        :param resolutions: The resolutions of this CatalogEntry.
        :type resolutions: List[int]
        """

        self._resolutions = resolutions

    @property
    def links(self) -> List[Link]:
        """Gets the links of this CatalogEntry.

        The list of links, e.g., to the operations provided by this DGGS CatalogEntry.  # noqa: E501

        :return: The links of this CatalogEntry.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this CatalogEntry.

        The list of links, e.g., to the operations provided by this DGGS CatalogEntry.  # noqa: E501

        :param links: The links of this CatalogEntry.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError(
                "Invalid value for `links`, must not be `None`"
            )  # noqa: E501

        self._links = links

    @property
    def extent(self) -> List[float]:
        """Gets the extent of this CatalogEntry.


        :return: The extent of this CatalogEntry.
        :rtype: List[float]
        """
        return self._extent

    @resolutions.setter
    def extent(self, extent: List[float]):
        """Sets the extent of this CatalogEntry.


        :param extent: The extent of this CatalogEntry.
        :type extent: List[float]
        """

        self._extent = extent

    @property
    def variables(self) -> List[str]:
        """Gets the variables of this CatalogEntry.

        The list of variables, e.g., CatalogEntry.  # noqa: E501

        :return: The variables of this CatalogEntry.
        :rtype: List[str]
        """
        return self._variables

    @links.setter
    def variables(self, variables: List[str]):
        """Sets the variables of this CatalogEntry.

        The list of variables, e.g., CatalogEntry.  # noqa: E501

        :param variables: The variables of this CatalogEntry.
        :type variables: List[str]
        """
        if variables is None:
            raise ValueError(
                "Invalid value for `variables`, must not be `None`"
            )  # noqa: E501

        self._variables = variables

    @property
    def date_loaded(self) -> str:
        """Gets the date_loaded of this CatalogEntry.

        a date_loaded of the CatalogEntry  # noqa: E501

        :return: The date_loaded of this CatalogEntry.
        :rtype: str
        """
        return self._date_loaded

    @description.setter
    def date_loaded(self, date_loaded: str):
        """Sets the date_loaded of this CatalogEntry.

        a date_loaded of the CatalogEntry  # noqa: E501

        :param date_loaded: The date_loaded of this CatalogEntry.
        :type date_loaded: str
        """

        self._date_loaded = date_loaded
