# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from dggs_api_server.models.base_model_ import Model
from dggs_api_server import util


class Keyword(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, keyword: str=None, code: str=None, code_space: str=None):  # noqa: E501
        """Keyword - a model defined in Swagger

        :param keyword: The keyword of this Keyword.  # noqa: E501
        :type keyword: str
        :param code: The code of this Keyword.  # noqa: E501
        :type code: str
        :param code_space: The code_space of this Keyword.  # noqa: E501
        :type code_space: str
        """
        self.swagger_types = {
            'keyword': str,
            'code': str,
            'code_space': str
        }

        self.attribute_map = {
            'keyword': 'keyword',
            'code': 'code',
            'code_space': 'codeSpace'
        }
        self._keyword = keyword
        self._code = code
        self._code_space = code_space

    @classmethod
    def from_dict(cls, dikt) -> 'Keyword':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The keyword of this Keyword.  # noqa: E501
        :rtype: Keyword
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyword(self) -> str:
        """Gets the keyword of this Keyword.


        :return: The keyword of this Keyword.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword: str):
        """Sets the keyword of this Keyword.


        :param keyword: The keyword of this Keyword.
        :type keyword: str
        """
        if keyword is None:
            raise ValueError("Invalid value for `keyword`, must not be `None`")  # noqa: E501

        self._keyword = keyword

    @property
    def code(self) -> str:
        """Gets the code of this Keyword.


        :return: The code of this Keyword.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Keyword.


        :param code: The code of this Keyword.
        :type code: str
        """

        self._code = code

    @property
    def code_space(self) -> str:
        """Gets the code_space of this Keyword.


        :return: The code_space of this Keyword.
        :rtype: str
        """
        return self._code_space

    @code_space.setter
    def code_space(self, code_space: str):
        """Sets the code_space of this Keyword.


        :param code_space: The code_space of this Keyword.
        :type code_space: str
        """

        self._code_space = code_space
