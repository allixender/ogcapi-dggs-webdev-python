# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from dggs_api_server.models.base_model_ import Model
from dggs_api_server.models.link import Link  # noqa: F401,E501
from dggs_api_server.models.collections import Collections  # noqa: F401,E501
from dggs_api_server import util


class CollectionList(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self, links: List[Link] = None, collections: List[Collections] = None
    ):  # noqa: E501
        """CollectionList - a model defined in Swagger

        :param links: The links of this CollectionList.  # noqa: E501
        :type links: List[Link]
        :param collections: The Collections of this CollectionList.  # noqa: E501
        :type collections: List[Collections]
        """
        self.swagger_types = {"links": List[Link], "collections": List[Collections]}

        self.attribute_map = {"links": "links", "collections": "collections"}
        self._links = links
        self._collections = collections

    @classmethod
    def from_dict(cls, dikt) -> "CollectionList":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The collection-list of this CollectionList.  # noqa: E501
        :rtype: CollectionList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self) -> List[Link]:
        """Gets the links of this CollectionList.


        :return: The links of this CollectionList.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this CollectionList.


        :param links: The links of this CollectionList.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError(
                "Invalid value for `links`, must not be `None`"
            )  # noqa: E501

        self._links = links

    @property
    def collections(self) -> List[Collections]:
        """Gets the Collections of this CollectionList.


        :return: The Collections of this CollectionList.
        :rtype: List[Collections]
        """
        return self._collections

    @collections.setter
    def collections(self, collections: List[Collections]):
        """Sets the collections of this CollectionList.


        :param Collections: The collections of this CollectionList.
        :type collections: List[Collections]
        """
        if collections is None:
            raise ValueError(
                "Invalid value for `collections`, must not be `None`"
            )  # noqa: E501

        self._collections = collections
