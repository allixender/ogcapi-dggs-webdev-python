# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict, Union  # noqa: F401

from dggs_api_server.models.base_model_ import Model
from dggs_api_server.models.geometry_geo_json import GeometryGeoJSON  # noqa: F401,E501
from dggs_api_server.models.link import Link  # noqa: F401,E501
# from dggs_api_server.models.object import Object  # noqa: F401,E501
from dggs_api_server import util

# OneOffeatureGeoJSONId = type(Union[str, int])
from dggs_api_server.models.one_offeature_geo_json_id import OneOffeatureGeoJSONId

class FeatureGeoJSON(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, geometry: GeometryGeoJSON=None, properties: object=None, id: OneOffeatureGeoJSONId=None, links: List[Link]=None):  # noqa: E501
        """FeatureGeoJSON - a model defined in Swagger

        :param type: The type of this FeatureGeoJSON.  # noqa: E501
        :type type: str
        :param geometry: The geometry of this FeatureGeoJSON.  # noqa: E501
        :type geometry: GeometryGeoJSON
        :param properties: The properties of this FeatureGeoJSON.  # noqa: E501
        :type properties: object
        :param id: The id of this FeatureGeoJSON.  # noqa: E501
        :type id: OneOffeatureGeoJSONId
        :param links: The links of this FeatureGeoJSON.  # noqa: E501
        :type links: List[Link]
        """
        self.swagger_types = {
            'type': str,
            'geometry': GeometryGeoJSON,
            'properties': object,
            'id': OneOffeatureGeoJSONId,
            'links': List[Link]
        }

        self.attribute_map = {
            'type': 'type',
            'geometry': 'geometry',
            'properties': 'properties',
            'id': 'id',
            'links': 'links'
        }
        self._type = type
        self._geometry = geometry
        self._properties = properties
        self._id = id
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureGeoJSON':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The featureGeoJSON of this FeatureGeoJSON.  # noqa: E501
        :rtype: FeatureGeoJSON
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this FeatureGeoJSON.


        :return: The type of this FeatureGeoJSON.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this FeatureGeoJSON.


        :param type: The type of this FeatureGeoJSON.
        :type type: str
        """
        allowed_values = ["Feature"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def geometry(self) -> GeometryGeoJSON:
        """Gets the geometry of this FeatureGeoJSON.


        :return: The geometry of this FeatureGeoJSON.
        :rtype: GeometryGeoJSON
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry: GeometryGeoJSON):
        """Sets the geometry of this FeatureGeoJSON.


        :param geometry: The geometry of this FeatureGeoJSON.
        :type geometry: GeometryGeoJSON
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def properties(self) -> object:
        """Gets the properties of this FeatureGeoJSON.


        :return: The properties of this FeatureGeoJSON.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties: object):
        """Sets the properties of this FeatureGeoJSON.


        :param properties: The properties of this FeatureGeoJSON.
        :type properties: object
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def id(self) -> OneOffeatureGeoJSONId:
        """Gets the id of this FeatureGeoJSON.


        :return: The id of this FeatureGeoJSON.
        :rtype: OneOffeatureGeoJSONId
        """
        return self._id

    @id.setter
    def id(self, id: OneOffeatureGeoJSONId):
        """Sets the id of this FeatureGeoJSON.


        :param id: The id of this FeatureGeoJSON.
        :type id: OneOffeatureGeoJSONId
        """

        self._id = id

    @property
    def links(self) -> List[Link]:
        """Gets the links of this FeatureGeoJSON.


        :return: The links of this FeatureGeoJSON.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this FeatureGeoJSON.


        :param links: The links of this FeatureGeoJSON.
        :type links: List[Link]
        """

        self._links = links
