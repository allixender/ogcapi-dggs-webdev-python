# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from dggs_api_server.models.base_model_ import Model
from dggs_api_server.models.dggs_rs_zone_class_zone_extent import DggsRsZoneClassZoneExtent  # noqa: F401,E501
from dggs_api_server import util


class DggsRsZoneClass(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, refinement_level: float=None, number_of_zones: str=None, zone_extent: DggsRsZoneClassZoneExtent=None):  # noqa: E501
        """DggsRsZoneClass - a model defined in Swagger

        :param refinement_level: The refinement_level of this DggsRsZoneClass.  # noqa: E501
        :type refinement_level: float
        :param number_of_zones: The number_of_zones of this DggsRsZoneClass.  # noqa: E501
        :type number_of_zones: str
        :param zone_extent: The zone_extent of this DggsRsZoneClass.  # noqa: E501
        :type zone_extent: DggsRsZoneClassZoneExtent
        """
        self.swagger_types = {
            'refinement_level': float,
            'number_of_zones': str,
            'zone_extent': DggsRsZoneClassZoneExtent
        }

        self.attribute_map = {
            'refinement_level': 'refinementLevel',
            'number_of_zones': 'numberOfZones',
            'zone_extent': 'zoneExtent'
        }
        self._refinement_level = refinement_level
        self._number_of_zones = number_of_zones
        self._zone_extent = zone_extent

    @classmethod
    def from_dict(cls, dikt) -> 'DggsRsZoneClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The dggsRsZoneClass of this DggsRsZoneClass.  # noqa: E501
        :rtype: DggsRsZoneClass
        """
        return util.deserialize_model(dikt, cls)

    @property
    def refinement_level(self) -> float:
        """Gets the refinement_level of this DggsRsZoneClass.

        refinement level of the selected DGGS  # noqa: E501

        :return: The refinement_level of this DggsRsZoneClass.
        :rtype: float
        """
        return self._refinement_level

    @refinement_level.setter
    def refinement_level(self, refinement_level: float):
        """Sets the refinement_level of this DggsRsZoneClass.

        refinement level of the selected DGGS  # noqa: E501

        :param refinement_level: The refinement_level of this DggsRsZoneClass.
        :type refinement_level: float
        """
        if refinement_level is None:
            raise ValueError("Invalid value for `refinement_level`, must not be `None`")  # noqa: E501

        self._refinement_level = refinement_level

    @property
    def number_of_zones(self) -> str:
        """Gets the number_of_zones of this DggsRsZoneClass.

        number of DGGS Zones defined for a given refinement level of the selected DGGS  # noqa: E501

        :return: The number_of_zones of this DggsRsZoneClass.
        :rtype: str
        """
        return self._number_of_zones

    @number_of_zones.setter
    def number_of_zones(self, number_of_zones: str):
        """Sets the number_of_zones of this DggsRsZoneClass.

        number of DGGS Zones defined for a given refinement level of the selected DGGS  # noqa: E501

        :param number_of_zones: The number_of_zones of this DggsRsZoneClass.
        :type number_of_zones: str
        """
        if number_of_zones is None:
            raise ValueError("Invalid value for `number_of_zones`, must not be `None`")  # noqa: E501

        self._number_of_zones = number_of_zones

    @property
    def zone_extent(self) -> DggsRsZoneClassZoneExtent:
        """Gets the zone_extent of this DggsRsZoneClass.


        :return: The zone_extent of this DggsRsZoneClass.
        :rtype: DggsRsZoneClassZoneExtent
        """
        return self._zone_extent

    @zone_extent.setter
    def zone_extent(self, zone_extent: DggsRsZoneClassZoneExtent):
        """Sets the zone_extent of this DggsRsZoneClass.


        :param zone_extent: The zone_extent of this DggsRsZoneClass.
        :type zone_extent: DggsRsZoneClassZoneExtent
        """
        if zone_extent is None:
            raise ValueError("Invalid value for `zone_extent`, must not be `None`")  # noqa: E501

        self._zone_extent = zone_extent
