# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.link import Link  # noqa: F401,E501
from swagger_server import util


class Collection(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, dggs_id: str=None, title: str=None, description: str=None, resolutions: List[float]=None, links: List[Link]=None):  # noqa: E501
        """Collection - a model defined in Swagger

        :param id: The id of this Collection.  # noqa: E501
        :type id: str
        :param dggs_id: The dggs_id of this Collection.  # noqa: E501
        :type dggs_id: str
        :param title: The title of this Collection.  # noqa: E501
        :type title: str
        :param description: The description of this Collection.  # noqa: E501
        :type description: str
        :param resolutions: The resolutions of this Collection.  # noqa: E501
        :type resolutions: List[float]
        :param links: The links of this Collection.  # noqa: E501
        :type links: List[Link]
        """
        self.swagger_types = {
            'id': str,
            'dggs_id': str,
            'title': str,
            'description': str,
            'resolutions': List[float],
            'links': List[Link]
        }

        self.attribute_map = {
            'id': 'id',
            'dggs_id': 'dggs-id',
            'title': 'title',
            'description': 'description',
            'resolutions': 'resolutions',
            'links': 'links'
        }
        self._id = id
        self._dggs_id = dggs_id
        self._title = title
        self._description = description
        self._resolutions = resolutions
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The collection of this Collection.  # noqa: E501
        :rtype: Collection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Collection.

        identifier of the the collection. In case it's a DGGS RS service, it will be the DGGS instance identifier, otherwise, it's going to be the data collection id.  # noqa: E501

        :return: The id of this Collection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Collection.

        identifier of the the collection. In case it's a DGGS RS service, it will be the DGGS instance identifier, otherwise, it's going to be the data collection id.  # noqa: E501

        :param id: The id of this Collection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def dggs_id(self) -> str:
        """Gets the dggs_id of this Collection.

        identifiers of the DGGS instance. For DGGS RS services, it will be the same as the id, for DGGS Data services, it identifiers the particular DGGS instance used.  # noqa: E501

        :return: The dggs_id of this Collection.
        :rtype: str
        """
        return self._dggs_id

    @dggs_id.setter
    def dggs_id(self, dggs_id: str):
        """Sets the dggs_id of this Collection.

        identifiers of the DGGS instance. For DGGS RS services, it will be the same as the id, for DGGS Data services, it identifiers the particular DGGS instance used.  # noqa: E501

        :param dggs_id: The dggs_id of this Collection.
        :type dggs_id: str
        """

        self._dggs_id = dggs_id

    @property
    def title(self) -> str:
        """Gets the title of this Collection.

        human readable title of the collection  # noqa: E501

        :return: The title of this Collection.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Collection.

        human readable title of the collection  # noqa: E501

        :param title: The title of this Collection.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this Collection.

        a description of the collection  # noqa: E501

        :return: The description of this Collection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Collection.

        a description of the collection  # noqa: E501

        :param description: The description of this Collection.
        :type description: str
        """

        self._description = description

    @property
    def resolutions(self) -> List[float]:
        """Gets the resolutions of this Collection.


        :return: The resolutions of this Collection.
        :rtype: List[float]
        """
        return self._resolutions

    @resolutions.setter
    def resolutions(self, resolutions: List[float]):
        """Sets the resolutions of this Collection.


        :param resolutions: The resolutions of this Collection.
        :type resolutions: List[float]
        """

        self._resolutions = resolutions

    @property
    def links(self) -> List[Link]:
        """Gets the links of this Collection.

        The list of links, e.g., to the operations provided by this DGGS collection.  # noqa: E501

        :return: The links of this Collection.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this Collection.

        The list of links, e.g., to the operations provided by this DGGS collection.  # noqa: E501

        :param links: The links of this Collection.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links
