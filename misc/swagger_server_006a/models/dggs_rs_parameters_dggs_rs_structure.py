# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from dggs_api_server.models.base_model_ import Model
from dggs_api_server.models.dggs_rs_parameters_dggs_rs_structure_zone_geometry import DggsRsParametersDggsRsStructureZoneGeometry  # noqa: F401,E501
from dggs_api_server.models.one_ofdggs_rs_parameters_dggs_rs_structure_surface_interpolation_items import OneOfdggsRsParametersDggsRsStructureSurfaceInterpolationItems  # noqa: F401,E501
from dggs_api_server import util


class DggsRsParametersDggsRsStructure(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, grid_constraint: List[str]=None, zone_geometry: DggsRsParametersDggsRsStructureZoneGeometry=None, surface_interpolation: List[OneOfdggsRsParametersDggsRsStructureSurfaceInterpolationItems]=None, reference_system_type: str=None, refinement_strategy: List[str]=None, refinement_ratio: float=None):  # noqa: E501
        """DggsRsParametersDggsRsStructure - a model defined in Swagger

        :param grid_constraint: The grid_constraint of this DggsRsParametersDggsRsStructure.  # noqa: E501
        :type grid_constraint: List[str]
        :param zone_geometry: The zone_geometry of this DggsRsParametersDggsRsStructure.  # noqa: E501
        :type zone_geometry: DggsRsParametersDggsRsStructureZoneGeometry
        :param surface_interpolation: The surface_interpolation of this DggsRsParametersDggsRsStructure.  # noqa: E501
        :type surface_interpolation: List[OneOfdggsRsParametersDggsRsStructureSurfaceInterpolationItems]
        :param reference_system_type: The reference_system_type of this DggsRsParametersDggsRsStructure.  # noqa: E501
        :type reference_system_type: str
        :param refinement_strategy: The refinement_strategy of this DggsRsParametersDggsRsStructure.  # noqa: E501
        :type refinement_strategy: List[str]
        :param refinement_ratio: The refinement_ratio of this DggsRsParametersDggsRsStructure.  # noqa: E501
        :type refinement_ratio: float
        """
        self.swagger_types = {
            'grid_constraint': List[str],
            'zone_geometry': DggsRsParametersDggsRsStructureZoneGeometry,
            'surface_interpolation': List[OneOfdggsRsParametersDggsRsStructureSurfaceInterpolationItems],
            'reference_system_type': str,
            'refinement_strategy': List[str],
            'refinement_ratio': float
        }

        self.attribute_map = {
            'grid_constraint': 'gridConstraint',
            'zone_geometry': 'zoneGeometry',
            'surface_interpolation': 'surfaceInterpolation',
            'reference_system_type': 'referenceSystemType',
            'refinement_strategy': 'refinementStrategy',
            'refinement_ratio': 'refinementRatio'
        }
        self._grid_constraint = grid_constraint
        self._zone_geometry = zone_geometry
        self._surface_interpolation = surface_interpolation
        self._reference_system_type = reference_system_type
        self._refinement_strategy = refinement_strategy
        self._refinement_ratio = refinement_ratio

    @classmethod
    def from_dict(cls, dikt) -> 'DggsRsParametersDggsRsStructure':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The dggsRsParameters_dggsRsStructure of this DggsRsParametersDggsRsStructure.  # noqa: E501
        :rtype: DggsRsParametersDggsRsStructure
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grid_constraint(self) -> List[str]:
        """Gets the grid_constraint of this DggsRsParametersDggsRsStructure.

        the type/class of DGGS the selected DGGS is. This is defined in OGC Topic 21 v2.0 [OGC 20-040r3] by the DGG_GridConstraint CodeList.  # noqa: E501

        :return: The grid_constraint of this DggsRsParametersDggsRsStructure.
        :rtype: List[str]
        """
        return self._grid_constraint

    @grid_constraint.setter
    def grid_constraint(self, grid_constraint: List[str]):
        """Sets the grid_constraint of this DggsRsParametersDggsRsStructure.

        the type/class of DGGS the selected DGGS is. This is defined in OGC Topic 21 v2.0 [OGC 20-040r3] by the DGG_GridConstraint CodeList.  # noqa: E501

        :param grid_constraint: The grid_constraint of this DggsRsParametersDggsRsStructure.
        :type grid_constraint: List[str]
        """
        allowed_values = ["cellAxisAligned", "cellConformal", "cellEquiAngular", "cellEquiDistant", "cellEqualSized"]  # noqa: E501
        if not set(grid_constraint).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grid_constraint` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(grid_constraint) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._grid_constraint = grid_constraint

    @property
    def zone_geometry(self) -> DggsRsParametersDggsRsStructureZoneGeometry:
        """Gets the zone_geometry of this DggsRsParametersDggsRsStructure.


        :return: The zone_geometry of this DggsRsParametersDggsRsStructure.
        :rtype: DggsRsParametersDggsRsStructureZoneGeometry
        """
        return self._zone_geometry

    @zone_geometry.setter
    def zone_geometry(self, zone_geometry: DggsRsParametersDggsRsStructureZoneGeometry):
        """Sets the zone_geometry of this DggsRsParametersDggsRsStructure.


        :param zone_geometry: The zone_geometry of this DggsRsParametersDggsRsStructure.
        :type zone_geometry: DggsRsParametersDggsRsStructureZoneGeometry
        """
        if zone_geometry is None:
            raise ValueError("Invalid value for `zone_geometry`, must not be `None`")  # noqa: E501

        self._zone_geometry = zone_geometry

    @property
    def surface_interpolation(self) -> List[OneOfdggsRsParametersDggsRsStructureSurfaceInterpolationItems]:
        """Gets the surface_interpolation of this DggsRsParametersDggsRsStructure.

        Surface Interpolation used to defined zones of this DGGS. - *spherical* -- The Cell surface is a section of a spherical surface. NOTE For Cells of sufficiently small extent, linear interpolation is sufficient to meet the Cell.errorBudget for area.   - *elliptical* -- The Cell surface is a section of an elliptical surface. NOTE for Cells of sufficiently small extent, spherical interpolation is sufficient to meet the Cell.errorBudget for area. NOTE for Cells of sufficiently small extent, linear interpolation is sufficient to meet the Cell.errorBudget for area.  # noqa: E501

        :return: The surface_interpolation of this DggsRsParametersDggsRsStructure.
        :rtype: List[OneOfdggsRsParametersDggsRsStructureSurfaceInterpolationItems]
        """
        return self._surface_interpolation

    @surface_interpolation.setter
    def surface_interpolation(self, surface_interpolation: List[OneOfdggsRsParametersDggsRsStructureSurfaceInterpolationItems]):
        """Sets the surface_interpolation of this DggsRsParametersDggsRsStructure.

        Surface Interpolation used to defined zones of this DGGS. - *spherical* -- The Cell surface is a section of a spherical surface. NOTE For Cells of sufficiently small extent, linear interpolation is sufficient to meet the Cell.errorBudget for area.   - *elliptical* -- The Cell surface is a section of an elliptical surface. NOTE for Cells of sufficiently small extent, spherical interpolation is sufficient to meet the Cell.errorBudget for area. NOTE for Cells of sufficiently small extent, linear interpolation is sufficient to meet the Cell.errorBudget for area.  # noqa: E501

        :param surface_interpolation: The surface_interpolation of this DggsRsParametersDggsRsStructure.
        :type surface_interpolation: List[OneOfdggsRsParametersDggsRsStructureSurfaceInterpolationItems]
        """
        if surface_interpolation is None:
            raise ValueError("Invalid value for `surface_interpolation`, must not be `None`")  # noqa: E501

        self._surface_interpolation = surface_interpolation

    @property
    def reference_system_type(self) -> str:
        """Gets the reference_system_type of this DggsRsParametersDggsRsStructure.

        \"## *Not Yet Implemented* must include all of these elements [MDRS - Metadata Reference System, CRS - Coordinate Reference System Metadata, ZIRS - Zone Identifier Reference System, GLOBE - Geometry Specification] - need to engage with OGC API Records SWG to determine key mappings for each of these identifiers. Need to engage with ISO/TC211 Infrastructure group to determine the status of the ISO19112 Glossary implimentations.\"  # noqa: E501

        :return: The reference_system_type of this DggsRsParametersDggsRsStructure.
        :rtype: str
        """
        return self._reference_system_type

    @reference_system_type.setter
    def reference_system_type(self, reference_system_type: str):
        """Sets the reference_system_type of this DggsRsParametersDggsRsStructure.

        \"## *Not Yet Implemented* must include all of these elements [MDRS - Metadata Reference System, CRS - Coordinate Reference System Metadata, ZIRS - Zone Identifier Reference System, GLOBE - Geometry Specification] - need to engage with OGC API Records SWG to determine key mappings for each of these identifiers. Need to engage with ISO/TC211 Infrastructure group to determine the status of the ISO19112 Glossary implimentations.\"  # noqa: E501

        :param reference_system_type: The reference_system_type of this DggsRsParametersDggsRsStructure.
        :type reference_system_type: str
        """

        self._reference_system_type = reference_system_type

    @property
    def refinement_strategy(self) -> List[str]:
        """Gets the refinement_strategy of this DggsRsParametersDggsRsStructure.

        CodeList for strategies that are used to define different categories of DGGS. Each strategy defines the topological relationship of one or more elements of cell geometry belonging to a child cell with one or more elements of geometry of its parent cell. Options include    - *centredChildCell* -- Each parent cell shares a cell←zone.representativePosition with one of its child cells.      - *nestedChildCell* -- The boundary of the set of child cells for a parent is identical to the parent’s boundary.      - *nodeCentredChildCell* -- Each parent cell has a child⇐zone.representativePosition coincident with each of the parent’s nodes (zero-Dimensional topological boundary element).      - *edgeCentredChildCell* -- Each parent cell of dimension greater than 1 has a child cell for which the cell⇐zone.representativePosition lies on each of the parent’s edges (one-Dimensional topological boundary element)      - *faceCentredChildCell* -- Each parent cell of dimension greater than 2 has a child cell for which the cell⇐zone.representativePosition lies on each of the parent’s faces (two-Dimensional topological boundary element)      - *solidCentredChildCell* -- Each parent cell of dimension greater than 3 has a child cell for which the cell⇐zone.representativePosition lies on each of the parent’s solids (three-Dimensional topological boundary element)  # noqa: E501

        :return: The refinement_strategy of this DggsRsParametersDggsRsStructure.
        :rtype: List[str]
        """
        return self._refinement_strategy

    @refinement_strategy.setter
    def refinement_strategy(self, refinement_strategy: List[str]):
        """Sets the refinement_strategy of this DggsRsParametersDggsRsStructure.

        CodeList for strategies that are used to define different categories of DGGS. Each strategy defines the topological relationship of one or more elements of cell geometry belonging to a child cell with one or more elements of geometry of its parent cell. Options include    - *centredChildCell* -- Each parent cell shares a cell←zone.representativePosition with one of its child cells.      - *nestedChildCell* -- The boundary of the set of child cells for a parent is identical to the parent’s boundary.      - *nodeCentredChildCell* -- Each parent cell has a child⇐zone.representativePosition coincident with each of the parent’s nodes (zero-Dimensional topological boundary element).      - *edgeCentredChildCell* -- Each parent cell of dimension greater than 1 has a child cell for which the cell⇐zone.representativePosition lies on each of the parent’s edges (one-Dimensional topological boundary element)      - *faceCentredChildCell* -- Each parent cell of dimension greater than 2 has a child cell for which the cell⇐zone.representativePosition lies on each of the parent’s faces (two-Dimensional topological boundary element)      - *solidCentredChildCell* -- Each parent cell of dimension greater than 3 has a child cell for which the cell⇐zone.representativePosition lies on each of the parent’s solids (three-Dimensional topological boundary element)  # noqa: E501

        :param refinement_strategy: The refinement_strategy of this DggsRsParametersDggsRsStructure.
        :type refinement_strategy: List[str]
        """
        allowed_values = ["centredChildCell", "nestedChildCell", "nodeCentredChildCell", "edgeCentredChildCell", "faceCentredChildCell", "solidCentredChildCell"]  # noqa: E501
        if not set(refinement_strategy).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `refinement_strategy` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(refinement_strategy) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._refinement_strategy = refinement_strategy

    @property
    def refinement_ratio(self) -> float:
        """Gets the refinement_ratio of this DggsRsParametersDggsRsStructure.

        Ratio of the number of child zones for every parent zone in the DGGS hierarchy. This is expressed as a single number representing the number of child zones to eath parent zone.  # noqa: E501

        :return: The refinement_ratio of this DggsRsParametersDggsRsStructure.
        :rtype: float
        """
        return self._refinement_ratio

    @refinement_ratio.setter
    def refinement_ratio(self, refinement_ratio: float):
        """Sets the refinement_ratio of this DggsRsParametersDggsRsStructure.

        Ratio of the number of child zones for every parent zone in the DGGS hierarchy. This is expressed as a single number representing the number of child zones to eath parent zone.  # noqa: E501

        :param refinement_ratio: The refinement_ratio of this DggsRsParametersDggsRsStructure.
        :type refinement_ratio: float
        """
        if refinement_ratio is None:
            raise ValueError("Invalid value for `refinement_ratio`, must not be `None`")  # noqa: E501

        self._refinement_ratio = refinement_ratio
