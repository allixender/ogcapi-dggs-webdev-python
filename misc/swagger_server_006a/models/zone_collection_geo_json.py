# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from dggs_api_server.models.base_model_ import Model
from dggs_api_server.models.link import Link  # noqa: F401,E501
from dggs_api_server.models.number_matched import NumberMatched  # noqa: F401,E501
from dggs_api_server.models.number_returned import NumberReturned  # noqa: F401,E501
from dggs_api_server.models.time_stamp import TimeStamp  # noqa: F401,E501
from dggs_api_server.models.zone_geo_json import ZoneGeoJSON  # noqa: F401,E501
from dggs_api_server import util


class ZoneCollectionGeoJSON(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, features: List[ZoneGeoJSON]=None, links: List[Link]=None, time_stamp: TimeStamp=None, number_matched: NumberMatched=None, number_returned: NumberReturned=None):  # noqa: E501
        """ZoneCollectionGeoJSON - a model defined in Swagger

        :param type: The type of this ZoneCollectionGeoJSON.  # noqa: E501
        :type type: str
        :param features: The features of this ZoneCollectionGeoJSON.  # noqa: E501
        :type features: List[ZoneGeoJSON]
        :param links: The links of this ZoneCollectionGeoJSON.  # noqa: E501
        :type links: List[Link]
        :param time_stamp: The time_stamp of this ZoneCollectionGeoJSON.  # noqa: E501
        :type time_stamp: TimeStamp
        :param number_matched: The number_matched of this ZoneCollectionGeoJSON.  # noqa: E501
        :type number_matched: NumberMatched
        :param number_returned: The number_returned of this ZoneCollectionGeoJSON.  # noqa: E501
        :type number_returned: NumberReturned
        """
        self.swagger_types = {
            'type': str,
            'features': List[ZoneGeoJSON],
            'links': List[Link],
            'time_stamp': TimeStamp,
            'number_matched': NumberMatched,
            'number_returned': NumberReturned
        }

        self.attribute_map = {
            'type': 'type',
            'features': 'features',
            'links': 'links',
            'time_stamp': 'timeStamp',
            'number_matched': 'numberMatched',
            'number_returned': 'numberReturned'
        }
        self._type = type
        self._features = features
        self._links = links
        self._time_stamp = time_stamp
        self._number_matched = number_matched
        self._number_returned = number_returned

    @classmethod
    def from_dict(cls, dikt) -> 'ZoneCollectionGeoJSON':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The zoneCollectionGeoJSON of this ZoneCollectionGeoJSON.  # noqa: E501
        :rtype: ZoneCollectionGeoJSON
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ZoneCollectionGeoJSON.


        :return: The type of this ZoneCollectionGeoJSON.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ZoneCollectionGeoJSON.


        :param type: The type of this ZoneCollectionGeoJSON.
        :type type: str
        """
        allowed_values = ["FeatureCollection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def features(self) -> List[ZoneGeoJSON]:
        """Gets the features of this ZoneCollectionGeoJSON.


        :return: The features of this ZoneCollectionGeoJSON.
        :rtype: List[ZoneGeoJSON]
        """
        return self._features

    @features.setter
    def features(self, features: List[ZoneGeoJSON]):
        """Sets the features of this ZoneCollectionGeoJSON.


        :param features: The features of this ZoneCollectionGeoJSON.
        :type features: List[ZoneGeoJSON]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def links(self) -> List[Link]:
        """Gets the links of this ZoneCollectionGeoJSON.


        :return: The links of this ZoneCollectionGeoJSON.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this ZoneCollectionGeoJSON.


        :param links: The links of this ZoneCollectionGeoJSON.
        :type links: List[Link]
        """

        self._links = links

    @property
    def time_stamp(self) -> TimeStamp:
        """Gets the time_stamp of this ZoneCollectionGeoJSON.


        :return: The time_stamp of this ZoneCollectionGeoJSON.
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: TimeStamp):
        """Sets the time_stamp of this ZoneCollectionGeoJSON.


        :param time_stamp: The time_stamp of this ZoneCollectionGeoJSON.
        :type time_stamp: TimeStamp
        """

        self._time_stamp = time_stamp

    @property
    def number_matched(self) -> NumberMatched:
        """Gets the number_matched of this ZoneCollectionGeoJSON.


        :return: The number_matched of this ZoneCollectionGeoJSON.
        :rtype: NumberMatched
        """
        return self._number_matched

    @number_matched.setter
    def number_matched(self, number_matched: NumberMatched):
        """Sets the number_matched of this ZoneCollectionGeoJSON.


        :param number_matched: The number_matched of this ZoneCollectionGeoJSON.
        :type number_matched: NumberMatched
        """

        self._number_matched = number_matched

    @property
    def number_returned(self) -> NumberReturned:
        """Gets the number_returned of this ZoneCollectionGeoJSON.


        :return: The number_returned of this ZoneCollectionGeoJSON.
        :rtype: NumberReturned
        """
        return self._number_returned

    @number_returned.setter
    def number_returned(self, number_returned: NumberReturned):
        """Sets the number_returned of this ZoneCollectionGeoJSON.


        :param number_returned: The number_returned of this ZoneCollectionGeoJSON.
        :type number_returned: NumberReturned
        """

        self._number_returned = number_returned
