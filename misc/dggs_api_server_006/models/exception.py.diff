--- swagger_server_006/models/exception.py	2021-10-18 14:13:46.744807100 +0300
+++ dggs_api_server_004/models/exception.py	2021-10-14 16:15:08.095394600 +0300
@@ -1,90 +1,96 @@
-# coding: utf-8
-
-from __future__ import absolute_import
-from datetime import date, datetime  # noqa: F401
-
-from typing import List, Dict  # noqa: F401
-
-from swagger_server.models.base_model_ import Model
-from swagger_server import util
-
-
-class Exception(Model):
-    """NOTE: This class is auto generated by the swagger code generator program.
-
-    Do not edit the class manually.
-    """
-    def __init__(self, code: str=None, description: str=None):  # noqa: E501
-        """Exception - a model defined in Swagger
-
-        :param code: The code of this Exception.  # noqa: E501
-        :type code: str
-        :param description: The description of this Exception.  # noqa: E501
-        :type description: str
-        """
-        self.swagger_types = {
-            'code': str,
-            'description': str
-        }
-
-        self.attribute_map = {
-            'code': 'code',
-            'description': 'description'
-        }
-        self._code = code
-        self._description = description
-
-    @classmethod
-    def from_dict(cls, dikt) -> 'Exception':
-        """Returns the dict as a model
-
-        :param dikt: A dict.
-        :type: dict
-        :return: The exception of this Exception.  # noqa: E501
-        :rtype: Exception
-        """
-        return util.deserialize_model(dikt, cls)
-
-    @property
-    def code(self) -> str:
-        """Gets the code of this Exception.
-
-
-        :return: The code of this Exception.
-        :rtype: str
-        """
-        return self._code
-
-    @code.setter
-    def code(self, code: str):
-        """Sets the code of this Exception.
-
-
-        :param code: The code of this Exception.
-        :type code: str
-        """
-        if code is None:
-            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
-
-        self._code = code
-
-    @property
-    def description(self) -> str:
-        """Gets the description of this Exception.
-
-
-        :return: The description of this Exception.
-        :rtype: str
-        """
-        return self._description
-
-    @description.setter
-    def description(self, description: str):
-        """Sets the description of this Exception.
-
-
-        :param description: The description of this Exception.
-        :type description: str
-        """
-
-        self._description = description
+# coding: utf-8
+
+from __future__ import absolute_import
+from datetime import date, datetime  # noqa: F401
+
+from typing import List, Dict  # noqa: F401
+
+from dggs_api_server.models.base_model_ import Model
+from dggs_api_server import util
+
+class DggsException(Model):
+    """NOTE: This class is auto generated by the swagger code generator program.
+
+    Do not edit the class manually.
+    """
+    def __init__(self, code: str=None, description: str=None):  # noqa: E501
+        """DggsException - a model defined in Swagger
+
+        :param code: The code of this DggsException.  # noqa: E501
+        :type code: str
+        :param description: The description of this DggsException.  # noqa: E501
+        :type description: str
+        """
+        self.swagger_types = {
+            'code': str,
+            'description': str
+        }
+
+        self.attribute_map = {
+            'code': 'code',
+            'description': 'description'
+        }
+        self._code = code
+        self._description = description
+
+    @classmethod
+    def from_dict(cls, dikt) -> 'DggsException':
+        """Returns the dict as a model
+
+        :param dikt: A dict.
+        :type: dict
+        :return: The DggsException of this DggsException.  # noqa: E501
+        :rtype: DggsException
+        """
+        return util.deserialize_model(dikt, cls)
+
+    @property
+    def code(self) -> str:
+        """Gets the code of this DggsException.
+
+
+        :return: The code of this DggsException.
+        :rtype: str
+        """
+        return self._code
+
+    @code.setter
+    def code(self, code: str):
+        """Sets the code of this DggsException.
+
+
+        :param code: The code of this DggsException.
+        :type code: str
+        """
+        if code is None:
+            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
+
+        self._code = code
+
+    @property
+    def description(self) -> str:
+        """Gets the description of this DggsException.
+
+
+        :return: The description of this DggsException.
+        :rtype: str
+        """
+        return self._description
+
+    @description.setter
+    def description(self, description: str):
+        """Sets the description of this DggsException.
+
+
+        :param description: The description of this DggsException.
+        :type description: str
+        """
+
+        self._description = description
+
+
+class DggsCollectionIdNotFoundError(DggsException):
+    def __init__(self):
+        code = "NOT_FOUND"
+        description = "collection_id not found"
+        super().__init__(code, description)
