--- swagger_server_006/models/dggsjson.py	2021-10-18 14:13:46.702906400 +0300
+++ dggs_api_server_004/models/dggsjson.py	2021-10-14 16:15:08.094398200 +0300
@@ -1,182 +1,184 @@
-# coding: utf-8
-
-from __future__ import absolute_import
-from datetime import date, datetime  # noqa: F401
-
-from typing import List, Dict  # noqa: F401
-
-from swagger_server.models.base_model_ import Model
-from swagger_server.models.link import Link  # noqa: F401,E501
-from swagger_server.models.one_of_dggsjson_id import OneOfDGGSJSONId  # noqa: F401,E501
-from swagger_server import util
-
-
-class DGGSJSON(Model):
-    """NOTE: This class is auto generated by the swagger code generator program.
-
-    Do not edit the class manually.
-    """
-    def __init__(self, id: OneOfDGGSJSONId=None, type: str=None, geometry: List[str]=None, properties: object=None, links: List[Link]=None):  # noqa: E501
-        """DGGSJSON - a model defined in Swagger
-
-        :param id: The id of this DGGSJSON.  # noqa: E501
-        :type id: OneOfDGGSJSONId
-        :param type: The type of this DGGSJSON.  # noqa: E501
-        :type type: str
-        :param geometry: The geometry of this DGGSJSON.  # noqa: E501
-        :type geometry: List[str]
-        :param properties: The properties of this DGGSJSON.  # noqa: E501
-        :type properties: object
-        :param links: The links of this DGGSJSON.  # noqa: E501
-        :type links: List[Link]
-        """
-        self.swagger_types = {
-            'id': OneOfDGGSJSONId,
-            'type': str,
-            'geometry': List[str],
-            'properties': object,
-            'links': List[Link]
-        }
-
-        self.attribute_map = {
-            'id': 'id',
-            'type': 'type',
-            'geometry': 'geometry',
-            'properties': 'properties',
-            'links': 'links'
-        }
-        self._id = id
-        self._type = type
-        self._geometry = geometry
-        self._properties = properties
-        self._links = links
-
-    @classmethod
-    def from_dict(cls, dikt) -> 'DGGSJSON':
-        """Returns the dict as a model
-
-        :param dikt: A dict.
-        :type: dict
-        :return: The DGGSJSON of this DGGSJSON.  # noqa: E501
-        :rtype: DGGSJSON
-        """
-        return util.deserialize_model(dikt, cls)
-
-    @property
-    def id(self) -> OneOfDGGSJSONId:
-        """Gets the id of this DGGSJSON.
-
-
-        :return: The id of this DGGSJSON.
-        :rtype: OneOfDGGSJSONId
-        """
-        return self._id
-
-    @id.setter
-    def id(self, id: OneOfDGGSJSONId):
-        """Sets the id of this DGGSJSON.
-
-
-        :param id: The id of this DGGSJSON.
-        :type id: OneOfDGGSJSONId
-        """
-        if id is None:
-            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
-
-        self._id = id
-
-    @property
-    def type(self) -> str:
-        """Gets the type of this DGGSJSON.
-
-
-        :return: The type of this DGGSJSON.
-        :rtype: str
-        """
-        return self._type
-
-    @type.setter
-    def type(self, type: str):
-        """Sets the type of this DGGSJSON.
-
-
-        :param type: The type of this DGGSJSON.
-        :type type: str
-        """
-        allowed_values = ["Feature"]  # noqa: E501
-        if type not in allowed_values:
-            raise ValueError(
-                "Invalid value for `type` ({0}), must be one of {1}"
-                .format(type, allowed_values)
-            )
-
-        self._type = type
-
-    @property
-    def geometry(self) -> List[str]:
-        """Gets the geometry of this DGGSJSON.
-
-        The geometry of the feature, as a list of DGGS zone ids  # noqa: E501
-
-        :return: The geometry of this DGGSJSON.
-        :rtype: List[str]
-        """
-        return self._geometry
-
-    @geometry.setter
-    def geometry(self, geometry: List[str]):
-        """Sets the geometry of this DGGSJSON.
-
-        The geometry of the feature, as a list of DGGS zone ids  # noqa: E501
-
-        :param geometry: The geometry of this DGGSJSON.
-        :type geometry: List[str]
-        """
-        if geometry is None:
-            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501
-
-        self._geometry = geometry
-
-    @property
-    def properties(self) -> object:
-        """Gets the properties of this DGGSJSON.
-
-
-        :return: The properties of this DGGSJSON.
-        :rtype: object
-        """
-        return self._properties
-
-    @properties.setter
-    def properties(self, properties: object):
-        """Sets the properties of this DGGSJSON.
-
-
-        :param properties: The properties of this DGGSJSON.
-        :type properties: object
-        """
-        if properties is None:
-            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
-
-        self._properties = properties
-
-    @property
-    def links(self) -> List[Link]:
-        """Gets the links of this DGGSJSON.
-
-
-        :return: The links of this DGGSJSON.
-        :rtype: List[Link]
-        """
-        return self._links
-
-    @links.setter
-    def links(self, links: List[Link]):
-        """Sets the links of this DGGSJSON.
-
-
-        :param links: The links of this DGGSJSON.
-        :type links: List[Link]
-        """
-
-        self._links = links
+# coding: utf-8
+
+from __future__ import absolute_import
+from datetime import date, datetime  # noqa: F401
+
+from typing import List, Dict, Union  # noqa: F401
+
+from dggs_api_server.models.base_model_ import Model
+from dggs_api_server.models.link import Link  # noqa: F401,E501
+# from dggs_api_server.models.object import Object  # noqa: F401,E501
+from dggs_api_server import util
+
+# OneOfDGGSJSONId = type(Union[str, int])
+from dggs_api_server.models.one_of_dggsjson_id import OneOfDGGSJSONId
+
+class DGGSJSON(Model):
+    """NOTE: This class is auto generated by the swagger code generator program.
+
+    Do not edit the class manually.
+    """
+    def __init__(self, id: OneOfDGGSJSONId=None, type: str=None, geometry: List[str]=None, properties: object=None, links: List[Link]=None):  # noqa: E501
+        """DGGSJSON - a model defined in Swagger
+
+        :param id: The id of this DGGSJSON.  # noqa: E501
+        :type id: OneOfDGGSJSONId
+        :param type: The type of this DGGSJSON.  # noqa: E501
+        :type type: str
+        :param geometry: The geometry of this DGGSJSON.  # noqa: E501
+        :type geometry: List[str]
+        :param properties: The properties of this DGGSJSON.  # noqa: E501
+        :type properties: object
+        :param links: The links of this DGGSJSON.  # noqa: E501
+        :type links: List[Link]
+        """
+        self.swagger_types = {
+            'id': OneOfDGGSJSONId,
+            'type': str,
+            'geometry': List[str],
+            'properties': object,
+            'links': List[Link]
+        }
+
+        self.attribute_map = {
+            'id': 'id',
+            'type': 'type',
+            'geometry': 'geometry',
+            'properties': 'properties',
+            'links': 'links'
+        }
+        self._id = id
+        self._type = type
+        self._geometry = geometry
+        self._properties = properties
+        self._links = links
+
+    @classmethod
+    def from_dict(cls, dikt) -> 'DGGSJSON':
+        """Returns the dict as a model
+
+        :param dikt: A dict.
+        :type: dict
+        :return: The DGGSJSON of this DGGSJSON.  # noqa: E501
+        :rtype: DGGSJSON
+        """
+        return util.deserialize_model(dikt, cls)
+
+    @property
+    def id(self) -> OneOfDGGSJSONId:
+        """Gets the id of this DGGSJSON.
+
+
+        :return: The id of this DGGSJSON.
+        :rtype: OneOfDGGSJSONId
+        """
+        return self._id
+
+    @id.setter
+    def id(self, id: OneOfDGGSJSONId):
+        """Sets the id of this DGGSJSON.
+
+
+        :param id: The id of this DGGSJSON.
+        :type id: OneOfDGGSJSONId
+        """
+        if id is None:
+            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
+
+        self._id = id
+
+    @property
+    def type(self) -> str:
+        """Gets the type of this DGGSJSON.
+
+
+        :return: The type of this DGGSJSON.
+        :rtype: str
+        """
+        return self._type
+
+    @type.setter
+    def type(self, type: str):
+        """Sets the type of this DGGSJSON.
+
+
+        :param type: The type of this DGGSJSON.
+        :type type: str
+        """
+        allowed_values = ["Feature"]  # noqa: E501
+        if type not in allowed_values:
+            raise ValueError(
+                "Invalid value for `type` ({0}), must be one of {1}"
+                .format(type, allowed_values)
+            )
+
+        self._type = type
+
+    @property
+    def geometry(self) -> List[str]:
+        """Gets the geometry of this DGGSJSON.
+
+        The geometry of the feature, as a list of DGGS zone ids  # noqa: E501
+
+        :return: The geometry of this DGGSJSON.
+        :rtype: List[str]
+        """
+        return self._geometry
+
+    @geometry.setter
+    def geometry(self, geometry: List[str]):
+        """Sets the geometry of this DGGSJSON.
+
+        The geometry of the feature, as a list of DGGS zone ids  # noqa: E501
+
+        :param geometry: The geometry of this DGGSJSON.
+        :type geometry: List[str]
+        """
+        if geometry is None:
+            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501
+
+        self._geometry = geometry
+
+    @property
+    def properties(self) -> object:
+        """Gets the properties of this DGGSJSON.
+
+
+        :return: The properties of this DGGSJSON.
+        :rtype: object
+        """
+        return self._properties
+
+    @properties.setter
+    def properties(self, properties: object):
+        """Sets the properties of this DGGSJSON.
+
+
+        :param properties: The properties of this DGGSJSON.
+        :type properties: object
+        """
+        if properties is None:
+            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
+
+        self._properties = properties
+
+    @property
+    def links(self) -> List[Link]:
+        """Gets the links of this DGGSJSON.
+
+
+        :return: The links of this DGGSJSON.
+        :rtype: List[Link]
+        """
+        return self._links
+
+    @links.setter
+    def links(self, links: List[Link]):
+        """Sets the links of this DGGSJSON.
+
+
+        :param links: The links of this DGGSJSON.
+        :type links: List[Link]
+        """
+
+        self._links = links
