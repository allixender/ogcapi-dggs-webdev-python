--- swagger_server_006/models/geometrycollection_geo_json.py	2021-10-18 14:13:46.778702900 +0300
+++ dggs_api_server_004/models/geometrycollection_geo_json.py	2021-10-14 16:15:08.096392400 +0300
@@ -1,97 +1,97 @@
-# coding: utf-8
-
-from __future__ import absolute_import
-from datetime import date, datetime  # noqa: F401
-
-from typing import List, Dict  # noqa: F401
-
-from swagger_server.models.base_model_ import Model
-from swagger_server.models.geometry_geo_json import GeometryGeoJSON  # noqa: F401,E501
-from swagger_server import util
-
-
-class GeometrycollectionGeoJSON(Model):
-    """NOTE: This class is auto generated by the swagger code generator program.
-
-    Do not edit the class manually.
-    """
-    def __init__(self, type: str=None, geometries: List[GeometryGeoJSON]=None):  # noqa: E501
-        """GeometrycollectionGeoJSON - a model defined in Swagger
-
-        :param type: The type of this GeometrycollectionGeoJSON.  # noqa: E501
-        :type type: str
-        :param geometries: The geometries of this GeometrycollectionGeoJSON.  # noqa: E501
-        :type geometries: List[GeometryGeoJSON]
-        """
-        self.swagger_types = {
-            'type': str,
-            'geometries': List[GeometryGeoJSON]
-        }
-
-        self.attribute_map = {
-            'type': 'type',
-            'geometries': 'geometries'
-        }
-        self._type = type
-        self._geometries = geometries
-
-    @classmethod
-    def from_dict(cls, dikt) -> 'GeometrycollectionGeoJSON':
-        """Returns the dict as a model
-
-        :param dikt: A dict.
-        :type: dict
-        :return: The geometrycollectionGeoJSON of this GeometrycollectionGeoJSON.  # noqa: E501
-        :rtype: GeometrycollectionGeoJSON
-        """
-        return util.deserialize_model(dikt, cls)
-
-    @property
-    def type(self) -> str:
-        """Gets the type of this GeometrycollectionGeoJSON.
-
-
-        :return: The type of this GeometrycollectionGeoJSON.
-        :rtype: str
-        """
-        return self._type
-
-    @type.setter
-    def type(self, type: str):
-        """Sets the type of this GeometrycollectionGeoJSON.
-
-
-        :param type: The type of this GeometrycollectionGeoJSON.
-        :type type: str
-        """
-        allowed_values = ["GeometryCollection"]  # noqa: E501
-        if type not in allowed_values:
-            raise ValueError(
-                "Invalid value for `type` ({0}), must be one of {1}"
-                .format(type, allowed_values)
-            )
-
-        self._type = type
-
-    @property
-    def geometries(self) -> List[GeometryGeoJSON]:
-        """Gets the geometries of this GeometrycollectionGeoJSON.
-
-
-        :return: The geometries of this GeometrycollectionGeoJSON.
-        :rtype: List[GeometryGeoJSON]
-        """
-        return self._geometries
-
-    @geometries.setter
-    def geometries(self, geometries: List[GeometryGeoJSON]):
-        """Sets the geometries of this GeometrycollectionGeoJSON.
-
-
-        :param geometries: The geometries of this GeometrycollectionGeoJSON.
-        :type geometries: List[GeometryGeoJSON]
-        """
-        if geometries is None:
-            raise ValueError("Invalid value for `geometries`, must not be `None`")  # noqa: E501
-
-        self._geometries = geometries
+# coding: utf-8
+
+from __future__ import absolute_import
+from datetime import date, datetime  # noqa: F401
+
+from typing import List, Dict  # noqa: F401
+
+from dggs_api_server.models.base_model_ import Model
+from dggs_api_server.models.geometry_geo_json import GeometryGeoJSON  # noqa: F401,E501
+from dggs_api_server import util
+
+
+class GeometrycollectionGeoJSON(Model):
+    """NOTE: This class is auto generated by the swagger code generator program.
+
+    Do not edit the class manually.
+    """
+    def __init__(self, type: str=None, geometries: List[GeometryGeoJSON]=None):  # noqa: E501
+        """GeometrycollectionGeoJSON - a model defined in Swagger
+
+        :param type: The type of this GeometrycollectionGeoJSON.  # noqa: E501
+        :type type: str
+        :param geometries: The geometries of this GeometrycollectionGeoJSON.  # noqa: E501
+        :type geometries: List[GeometryGeoJSON]
+        """
+        self.swagger_types = {
+            'type': str,
+            'geometries': List[GeometryGeoJSON]
+        }
+
+        self.attribute_map = {
+            'type': 'type',
+            'geometries': 'geometries'
+        }
+        self._type = type
+        self._geometries = geometries
+
+    @classmethod
+    def from_dict(cls, dikt) -> 'GeometrycollectionGeoJSON':
+        """Returns the dict as a model
+
+        :param dikt: A dict.
+        :type: dict
+        :return: The geometrycollectionGeoJSON of this GeometrycollectionGeoJSON.  # noqa: E501
+        :rtype: GeometrycollectionGeoJSON
+        """
+        return util.deserialize_model(dikt, cls)
+
+    @property
+    def type(self) -> str:
+        """Gets the type of this GeometrycollectionGeoJSON.
+
+
+        :return: The type of this GeometrycollectionGeoJSON.
+        :rtype: str
+        """
+        return self._type
+
+    @type.setter
+    def type(self, type: str):
+        """Sets the type of this GeometrycollectionGeoJSON.
+
+
+        :param type: The type of this GeometrycollectionGeoJSON.
+        :type type: str
+        """
+        allowed_values = ["GeometryCollection"]  # noqa: E501
+        if type not in allowed_values:
+            raise ValueError(
+                "Invalid value for `type` ({0}), must be one of {1}"
+                .format(type, allowed_values)
+            )
+
+        self._type = type
+
+    @property
+    def geometries(self) -> List[GeometryGeoJSON]:
+        """Gets the geometries of this GeometrycollectionGeoJSON.
+
+
+        :return: The geometries of this GeometrycollectionGeoJSON.
+        :rtype: List[GeometryGeoJSON]
+        """
+        return self._geometries
+
+    @geometries.setter
+    def geometries(self, geometries: List[GeometryGeoJSON]):
+        """Sets the geometries of this GeometrycollectionGeoJSON.
+
+
+        :param geometries: The geometries of this GeometrycollectionGeoJSON.
+        :type geometries: List[GeometryGeoJSON]
+        """
+        if geometries is None:
+            raise ValueError("Invalid value for `geometries`, must not be `None`")  # noqa: E501
+
+        self._geometries = geometries
